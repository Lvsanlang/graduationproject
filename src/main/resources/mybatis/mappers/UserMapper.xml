<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.student.graduationproject.dao.mapper.UserMapper">
  <resultMap id="BaseResultMap" type="com.student.graduationproject.model.User.User">
    <result column="id" jdbcType="CHAR" property="id" />
    <result column="username" jdbcType="CHAR" property="username" />
    <result column="password" jdbcType="CHAR" property="password" />
    <result column="sex" jdbcType="INTEGER" property="sex" />
    <result column="birthday" jdbcType="CHAR" property="birthday" />
    <result column="email" jdbcType="CHAR" property="email" />
    <result column="data" jdbcType="CHAR" property="data" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, username, password, sex, birthday, email, data
  </sql>
  <select id="selectByExample" parameterType="com.student.graduationproject.model.User.UserExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <delete id="deleteByExample" parameterType="com.student.graduationproject.model.User.UserExample">
    delete from user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.student.graduationproject.model.User.User">
    insert into user (id, username, password, 
      sex, birthday, email, data
      )
    values (#{id,jdbcType=CHAR}, #{username,jdbcType=CHAR}, #{password,jdbcType=CHAR}, 
      #{sex,jdbcType=INTEGER}, #{birthday,jdbcType=CHAR}, #{email,jdbcType=CHAR}, #{data,jdbcType=CHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.student.graduationproject.model.User.User">
    insert into user
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="username != null">
        username,
      </if>
      <if test="password != null">
        password,
      </if>
      <if test="sex != null">
        sex,
      </if>
      <if test="birthday != null">
        birthday,
      </if>
      <if test="email != null">
        email,
      </if>
      <if test="data != null">
        data,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=CHAR},
      </if>
      <if test="username != null">
        #{username,jdbcType=CHAR},
      </if>
      <if test="password != null">
        #{password,jdbcType=CHAR},
      </if>
      <if test="sex != null">
        #{sex,jdbcType=INTEGER},
      </if>
      <if test="birthday != null">
        #{birthday,jdbcType=CHAR},
      </if>
      <if test="email != null">
        #{email,jdbcType=CHAR},
      </if>
      <if test="data != null">
        #{data,jdbcType=CHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.student.graduationproject.model.User.UserExample" resultType="java.lang.Long">
    select count(*) from user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update user
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=CHAR},
      </if>
      <if test="record.username != null">
        username = #{record.username,jdbcType=CHAR},
      </if>
      <if test="record.password != null">
        password = #{record.password,jdbcType=CHAR},
      </if>
      <if test="record.sex != null">
        sex = #{record.sex,jdbcType=INTEGER},
      </if>
      <if test="record.birthday != null">
        birthday = #{record.birthday,jdbcType=CHAR},
      </if>
      <if test="record.email != null">
        email = #{record.email,jdbcType=CHAR},
      </if>
      <if test="record.data != null">
        data = #{record.data,jdbcType=CHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update user
    set id = #{record.id,jdbcType=CHAR},
      username = #{record.username,jdbcType=CHAR},
      password = #{record.password,jdbcType=CHAR},
      sex = #{record.sex,jdbcType=INTEGER},
      birthday = #{record.birthday,jdbcType=CHAR},
      email = #{record.email,jdbcType=CHAR},
      data = #{record.data,jdbcType=CHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>


  <insert id="insertUser" parameterType="com.student.graduationproject.model.User.User">
    insert into user values(#{id},#{username},#{password},#{sex},#{birthday},#{email},#{data})
  </insert>

  <select id="selectUserName" parameterType="com.student.graduationproject.model.User.User" resultType="com.student.graduationproject.model.User.User">
    select
    <include refid="Base_Column_List" />
    from user
    WHERE ((username = #{username} AND password = #{password}) OR (email = #{username} AND password = #{password}) OR (username = #{username} AND email = #{email}));
  </select>

  <update id="UserPassword" parameterType="com.student.graduationproject.model.User.User">
    update user  SET password = #{password} WHERE id =  #{id};
  </update>

  <update id="updateusermassage" parameterType="com.student.graduationproject.model.User.User">
    update user
    SET username = #{username},sex = #{sex},birthday = #{birthday}, email = #{email}
    WHERE id = #{id};
  </update>

</mapper>